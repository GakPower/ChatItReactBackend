{"version":3,"sources":["components/secondary/NavBar/NavBar.tsx","components/secondary/Field/Field.tsx","ServerUtils.ts","components/primary/Login/Login.tsx","components/primary/Join/Join.tsx","components/primary/ForgotPass/ForgotPass.tsx","components/primary/ResetPass/ResetPass.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","id","to","Field","register","type","name","placeholder","invalid","shouldCheck","useState","passShown","setPassShown","className","classes","push","join","getClasses","ref","defaultValue","onClick","oldValue","tabIndex","SERVER_IP","cookies","Cookies","joinUser","a","username","email","password","fetch","method","headers","body","JSON","stringify","res","json","resJson","console","log","error","loginUser","emailLogin","emailUsername","jsonRes","valid","set","token","path","sameSite","forgotPass","isResetIdValid","updatePassword","newPassword","Login","disabled","setDisabled","useForm","handleSubmit","errors","reset","setError","onSubmit","setTimeout","test","message","renderErrors","Join","history","setShouldCheck","watch","passwordWatch","field","required","maxLength","value","pattern","minLength","validate","passConfirm","ForgotPass","ResetPass","useParams","then","useEffect","intervalID","setInterval","clearInterval","App","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.63c10936.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.scss';\nimport { Link } from 'react-router-dom';\n\nexport const NavBar = () => {\n\treturn (\n\t\t<nav id='navBar'>\n\t\t\t<Link to='/'>ChatIt</Link>\n\t\t\t<div>\n\t\t\t\t{/* <Link to='/login'>Login</Link>\n\t\t\t\t<Link to='/join'>Join</Link>\n\t\t\t\t<Link to='/forgotPassword'>Forgot your Password?</Link> */}\n\t\t\t</div>\n\t\t</nav>\n\t);\n};\n","import React, { useState } from 'react';\r\nimport './Field.scss';\r\n\r\ninterface Props {\r\n\tregister: any;\r\n\ttype: string;\r\n\tname: string;\r\n\tplaceholder: string;\r\n\tinvalid?: any;\r\n\tshouldCheck?: boolean;\r\n}\r\nexport const Field = ({\r\n\tregister,\r\n\ttype,\r\n\tname,\r\n\tplaceholder,\r\n\tinvalid,\r\n\tshouldCheck = false,\r\n}: Props) => {\r\n\tconst [passShown, setPassShown] = useState(false);\r\n\r\n\tconst getClasses = () => {\r\n\t\tconst classes = [];\r\n\t\tif (shouldCheck) classes.push(invalid ? 'invalid' : 'valid');\r\n\t\treturn classes.join(' ');\r\n\t};\r\n\treturn (\r\n\t\t<div id='field' className={getClasses()}>\r\n\t\t\t<input\r\n\t\t\t\tclassName={type === 'password' ? 'pass' : ''}\r\n\t\t\t\tref={register}\r\n\t\t\t\tname={name}\r\n\t\t\t\ttype={passShown && type === 'password' ? 'text' : type}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tdefaultValue=''\r\n\t\t\t/>\r\n\r\n\t\t\t{type === 'password' && (\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='toggle'\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tonClick={() => setPassShown((oldValue) => !oldValue)}\r\n\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t>\r\n\t\t\t\t\t{passShown ? 'H' : 'S'}\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import Cookies from 'universal-cookie';\nconst SERVER_IP = 'http://localhost:5000';\n\nconst cookies = new Cookies();\n\nexport const joinUser = async ({\n\tusername,\n\temail,\n\tpassword,\n}: {\n\tusername: string;\n\temail: string;\n\tpassword: string;\n}) => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/join`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ username, email, password }),\n\t\t});\n\t\tconst resJson = await res.json();\n\t\treturn resJson;\n\t} catch (error) {\n\t\tconsole.log({ error });\n\t\treturn error;\n\t}\n};\n\nexport const loginUser = async (\n\t{ emailUsername, password }: { emailUsername?: string; password: string },\n\temailLogin: boolean\n) => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/login`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ emailUsername, password, emailLogin }),\n\t\t});\n\n\t\tconst jsonRes = await res.json();\n\t\tif (jsonRes.valid) {\n\t\t\tcookies.set('token', jsonRes.token, { path: '/', sameSite: 'strict' });\n\t\t}\n\n\t\treturn jsonRes;\n\t} catch (error) {\n\t\tconsole.log({ error });\n\n\t\treturn error;\n\t}\n};\n\nexport const logPosts = async () => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/posts`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAuthorization: 'Bearer ' + cookies.get('token'),\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t});\n\t\tconst { valid, data, expired, token, message } = await res.json();\n\t\tif (valid) {\n\t\t\tconsole.log({ data });\n\t\t} else if (expired) {\n\t\t\tconsole.log('Expired and updated');\n\t\t\tcookies.set('token', token, { path: '/', sameSite: 'strict' });\n\t\t\tawait logPosts();\n\t\t} else if (message) {\n\t\t\tconsole.log({ message });\n\t\t}\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const forgotPass = async ({ email }: { email: string }) => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/forgotPass`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ email }),\n\t\t});\n\t\tawait res.json();\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const isResetIdValid = async (id: string) => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/checkResetId`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ id }),\n\t\t});\n\t\tconst jsonRes = await res.json();\n\n\t\treturn !!jsonRes.valid;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const updatePassword = async (id: string, newPassword: string) => {\n\ttry {\n\t\tconst res = await fetch(`${SERVER_IP}/api/auth/updatePassword`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ id, newPassword }),\n\t\t});\n\t\tconst jsonRes = await res.json();\n\n\t\treturn jsonRes;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n","import React, { useState } from 'react';\nimport { Field } from '../../secondary/Field/Field';\nimport { useForm } from 'react-hook-form';\nimport { loginUser } from '../../../ServerUtils';\nimport { Link } from 'react-router-dom';\nimport './Login.scss';\n\ninterface FormInput {\n\temailUsername: string;\n\tpassword: string;\n}\n\nexport const Login = () => {\n\tconst [disabled, setDisabled] = useState(false);\n\tconst { register, handleSubmit, errors, reset, setError } = useForm<\n\t\tFormInput\n\t>();\n\n\tconst renderErrors = () => {\n\t\tlet error;\n\t\tif (errors?.emailUsername) {\n\t\t\terror = errors?.emailUsername?.message;\n\t\t}\n\t\treturn <p id='error'>{error}</p>;\n\t};\n\n\tconst isEmail = (input: string) => {\n\t\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i;\n\t\treturn emailRegex.test(input);\n\t};\n\n\tconst onSubmit = async ({\n\t\temailUsername,\n\t\tpassword,\n\t}: {\n\t\temailUsername: string;\n\t\tpassword: string;\n\t}) => {\n\t\tsetDisabled(true);\n\t\tsetTimeout(async () => {\n\t\t\tsetDisabled(false);\n\t\t\tconst res = await loginUser(\n\t\t\t\t{ emailUsername, password },\n\t\t\t\tisEmail(emailUsername)\n\t\t\t);\n\t\t\tif (res.valid) {\n\t\t\t\treset();\n\t\t\t\t// NAVIGATE TO APP\n\t\t\t} else {\n\t\t\t\tsetError('emailUsername', {\n\t\t\t\t\ttype: 'manual',\n\t\t\t\t\tmessage: res.message,\n\t\t\t\t});\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div id='loginContainer'>\n\t\t\t<h3>Login</h3>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register()}\n\t\t\t\t\tname='emailUsername'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Email or Username'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register()}\n\t\t\t\t\tname='password'\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='Password'\n\t\t\t\t/>\n\t\t\t\t<Link to='/forgotPassword' id='forgotPass'>\n\t\t\t\t\tForgot your password?\n\t\t\t\t</Link>\n\t\t\t\t{renderErrors()}\n\t\t\t\t<button type='submit' disabled={disabled}>\n\t\t\t\t\tLogin\n\t\t\t\t</button>\n\n\t\t\t\t<p id='join'>\n\t\t\t\t\tDon't have an account? <Link to='/join'>Join us</Link>\n\t\t\t\t</p>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n","import React, { useState } from 'react';\nimport { Field } from '../../secondary/Field/Field';\nimport { useForm } from 'react-hook-form';\nimport { joinUser } from '../../../ServerUtils';\nimport { Link } from 'react-router-dom';\nimport './Join.scss';\n\ninterface FormInput {\n\tusername: string;\n\temail: string;\n\tpassword: string;\n\tpassConfirm: string;\n}\n\nexport const Join = ({ history }: { history: any }) => {\n\tconst [shouldCheck, setShouldCheck] = useState(false);\n\tconst [disabled, setDisabled] = useState(false);\n\n\tconst { register, handleSubmit, errors, watch, reset, setError } = useForm<\n\t\tFormInput\n\t>();\n\n\tconst passwordWatch = watch('password', '');\n\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i;\n\n\tconst renderErrors = () => {\n\t\tlet error;\n\t\tif (errors?.username) {\n\t\t\terror = errors?.username?.message;\n\t\t} else if (errors?.email) {\n\t\t\terror = errors?.email?.message;\n\t\t} else if (errors?.password) {\n\t\t\terror = errors?.password?.message;\n\t\t} else if (errors?.passConfirm) {\n\t\t\terror = 'Passwords do not match';\n\t\t}\n\t\treturn <p id='error'>{error}</p>;\n\t};\n\n\tconst onSubmit = async ({\n\t\tusername,\n\t\temail,\n\t\tpassword,\n\t}: {\n\t\tusername: string;\n\t\temail: string;\n\t\tpassword: string;\n\t}) => {\n\t\tsetDisabled(true);\n\t\tsetTimeout(async () => {\n\t\t\tsetDisabled(false);\n\t\t\tconst res = await joinUser({ username, email, password });\n\n\t\t\tif (res.valid) {\n\t\t\t\treset();\n\t\t\t\tsetShouldCheck(false);\n\t\t\t\t// NAVIGATE TO Login\n\t\t\t\thistory.push('./login');\n\t\t\t} else if (res.field) {\n\t\t\t\tsetError(res.field, {\n\t\t\t\t\ttype: 'manual',\n\t\t\t\t\tmessage: res.message,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log({ res });\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div id='joinContainer'>\n\t\t\t<h3>Join</h3>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Username is required',\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Username is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.username}\n\t\t\t\t\tname='username'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Username'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Email is required',\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Email is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpattern: { value: emailRegex, message: 'Invalid Email input' },\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.email}\n\t\t\t\t\tname='email'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Email'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Password is required',\n\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\tvalue: 8,\n\t\t\t\t\t\t\tmessage: 'Password is too short',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Password is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.password}\n\t\t\t\t\tname='password'\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='Password'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Confirm Password is required',\n\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\tvalue: 8,\n\t\t\t\t\t\t\tmessage: 'Confirm Password is too short',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Confirm Password is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\tvalue: (value) => value === passwordWatch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.passConfirm}\n\t\t\t\t\tname='passConfirm'\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='Confirm Password'\n\t\t\t\t/>\n\t\t\t\t{renderErrors()}\n\t\t\t\t<button\n\t\t\t\t\tid='submit'\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonClick={() => setShouldCheck(true)}\n\t\t\t\t>\n\t\t\t\t\tJoin\n\t\t\t\t</button>\n\n\t\t\t\t<p id='login'>\n\t\t\t\t\tAlready got an account? <Link to='/login'>Login</Link>\n\t\t\t\t</p>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n","import React, { useState } from 'react';\nimport { Field } from '../../secondary/Field/Field';\nimport { useForm } from 'react-hook-form';\nimport { forgotPass } from '../../../ServerUtils';\nimport { Link } from 'react-router-dom';\nimport './ForgotPass.scss';\n\ninterface FormInput {\n\temail: string;\n}\n\nexport const ForgotPass = ({ history }: { history: any }) => {\n\tconst [shouldCheck, setShouldCheck] = useState(false);\n\tconst [disabled, setDisabled] = useState(false);\n\tconst { register, handleSubmit, errors, reset } = useForm<FormInput>();\n\n\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i;\n\n\tconst onSubmit = async ({ email }: { email: string }) => {\n\t\tsetDisabled(true);\n\t\tsetTimeout(async () => {\n\t\t\tsetDisabled(false);\n\t\t\tawait forgotPass({ email });\n\t\t\treset();\n\t\t\tsetShouldCheck(false);\n\t\t\t// NAVIGATE TO LOGIN\n\t\t\thistory.push('./login');\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div id='forgotPassContainer'>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<h3>Reset Password</h3>\n\t\t\t\t<p id='desc'>\n\t\t\t\t\tYou will receive an email at your inbox with guidelines to reset your\n\t\t\t\t\tpassword\n\t\t\t\t</p>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Email is required',\n\t\t\t\t\t\tpattern: { value: emailRegex, message: 'Invalid Email input' },\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.email}\n\t\t\t\t\tname='email'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Email'\n\t\t\t\t/>\n\t\t\t\t{errors?.email && <p id='error'>{errors?.email?.message}</p>}\n\t\t\t\t<button\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonClick={() => setShouldCheck(true)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<p id='login'>\n\t\t\t\tBack to <Link to='/login'>Login</Link>\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\nimport { Field } from '../../secondary/Field/Field';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { isResetIdValid, updatePassword } from '../../../ServerUtils';\nimport './ResetPass.scss';\n\ninterface FormInput {\n\tpassword: string;\n\tpassConfirm: string;\n}\n\nexport const ResetPass = ({ history }: { history: any }) => {\n\tconst { id } = useParams<{ id: string }>();\n\n\tisResetIdValid(id).then((valid) => {\n\t\tif (!valid) {\n\t\t\thistory.push('/login');\n\t\t}\n\t});\n\n\tuseEffect(() => {\n\t\tconst intervalID = setInterval(() => {\n\t\t\tisResetIdValid(id).then((valid) => {\n\t\t\t\tif (!valid) {\n\t\t\t\t\thistory.push('/login');\n\t\t\t\t}\n\t\t\t});\n\t\t}, 1000);\n\t\treturn () => {\n\t\t\tclearInterval(intervalID);\n\t\t};\n\t}, [id, history]);\n\n\tconst [shouldCheck, setShouldCheck] = useState(false);\n\tconst [disabled, setDisabled] = useState(false);\n\tconst { register, handleSubmit, watch, errors, reset, setError } = useForm<\n\t\tFormInput\n\t>();\n\n\tconst passwordWatch = watch('password', '');\n\n\tconst renderErrors = () => {\n\t\tlet error;\n\t\tif (errors?.password) {\n\t\t\terror = errors?.password?.message;\n\t\t} else if (errors?.passConfirm) {\n\t\t\terror = 'Passwords do not match';\n\t\t}\n\n\t\treturn <p>{error}</p>;\n\t};\n\n\tconst onSubmit = async ({\n\t\tpassword,\n\t\tpassConfirm,\n\t}: {\n\t\tpassword: string;\n\t\tpassConfirm: string;\n\t}) => {\n\t\tsetDisabled(true);\n\t\tsetTimeout(async () => {\n\t\t\tsetDisabled(false);\n\t\t\tconst res = await updatePassword(id, password);\n\t\t\tif (res.valid) {\n\t\t\t\treset();\n\t\t\t\tsetShouldCheck(false);\n\t\t\t\t// NAVIGATE TO LOGIN\n\t\t\t\thistory.push('./login');\n\t\t\t} else {\n\t\t\t\tsetError('password', {\n\t\t\t\t\ttype: 'manual',\n\t\t\t\t\tmessage: res.message,\n\t\t\t\t});\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div id='resetPassContainer'>\n\t\t\t<h3>Reset Password</h3>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Password is required',\n\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\tvalue: 8,\n\t\t\t\t\t\t\tmessage: 'Password is too short',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Password is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.password}\n\t\t\t\t\tname='password'\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='New Password'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tregister={register({\n\t\t\t\t\t\trequired: 'Confirm Password is required',\n\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\tvalue: 8,\n\t\t\t\t\t\t\tmessage: 'Confirm Password is too short',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 255,\n\t\t\t\t\t\t\tmessage: 'Confirm Password is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\tvalue: (value) => value === passwordWatch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t\tshouldCheck={shouldCheck}\n\t\t\t\t\tinvalid={errors?.passConfirm}\n\t\t\t\t\tname='passConfirm'\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='Confirm Password'\n\t\t\t\t/>\n\t\t\t\t{renderErrors()}\n\t\t\t\t<button\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonClick={() => setShouldCheck(true)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport './App.scss';\nimport { NavBar } from './components/secondary/NavBar/NavBar';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { Login } from './components/primary/Login/Login';\nimport { Join } from './components/primary/Join/Join';\nimport { ForgotPass } from './components/primary/ForgotPass/ForgotPass';\nimport { ResetPass } from './components/primary/ResetPass/ResetPass';\n\nfunction App() {\n\treturn (\n\t\t<div id='App'>\n\t\t\t<NavBar />\n\t\t\t<div id='switchContainer'>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/login' component={Login} />\n\t\t\t\t\t<Route path='/join' component={Join} />\n\t\t\t\t\t<Route path='/forgotPassword' component={ForgotPass} />\n\t\t\t\t\t<Route path='/resetPassword/:id' component={ResetPass} />\n\t\t\t\t\t<Redirect to='/login' />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}